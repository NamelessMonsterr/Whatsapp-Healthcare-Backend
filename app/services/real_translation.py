"""
Real Translation Service - Multilingual Support for Indian Languages
"""
import logging
from typing import Dict, Any, Optional
import re
import requests

logger = logging.getLogger(__name__)

class RealTranslationService:
    """Real translation service for Indian languages"""
    
    def __init__(self):
        self.supported_languages = {
            "en": "English",
            "hi": "Hindi", 
            "ta": "Tamil",
            "te": "Telugu",
            "ml": "Malayalam",
            "kn": "Kannada",
            "bn": "Bengali",
            "gu": "Gujarati",
            "mr": "Marathi",
            "pa": "Punjabi",
            "or": "Odia",
            "as": "Assamese",
            "ur": "Urdu"
        }
        
        # Language detection patterns using Unicode ranges
        self.language_patterns = {
            "hi": r"[\u0900-\u097F]",      # Devanagari (Hindi, Marathi, etc.)
            "ta": r"[\u0B80-\u0BFF]",      # Tamil
            "te": r"[\u0C00-\u0C7F]",      # Telugu
            "ml": r"[\u0D00-\u0D7F]",      # Malayalam
            "kn": r"[\u0C80-\u0CFF]",      # Kannada
            "bn": r"[\u0980-\u09FF]",      # Bengali
            "gu": r"[\u0A80-\u0AFF]",      # Gujarati
            "mr": r"[\u0900-\u097F]",      # Marathi (shares Devanagari)
            "pa": r"[\u0A00-\u0A7F]",      # Punjabi
            "or": r"[\u0B00-\u0B7F]",      # Odia
            "as": r"[\u0980-\u09FF]",      # Assamese (shares Bengali)
            "ur": r"[\u0600-\u06FF]"       # Urdu (Arabic script)
        }
        
        logger.info(f"тЬЕ Real Translation Service initialized - Supported languages: {len(self.supported_languages)}")
    
    def detect_language(self, text: str) -> str:
        """
        Detect language using Unicode patterns
        
        Args:
            text: Input text to analyze
            
        Returns:
            Language code (ISO 639-1)
        """
        try:
            text_clean = text.strip()
            
            # Check for each language using Unicode ranges
            for lang_code, pattern in self.language_patterns.items():
                if re.search(pattern, text_clean):
                    logger.info(f"тЬЕ Language detected: {lang_code} ({self.supported_languages[lang_code]})")
                    return lang_code
            
            # Default to English for Latin script
            if re.search(r"[a-zA-Z]", text_clean):
                logger.info("ЁЯФд Language detected: en (English - Latin script)")
                return "en"
            
            # Fallback to English
            logger.info("ЁЯФд Language detection fallback: en (English)")
            return "en"
            
        except Exception as e:
            logger.error(f"тЭМ Error detecting language: {e}")
            return "en"
    
    def get_language_name(self, lang_code: str) -> str:
        """Get full language name from code"""
        return self.supported_languages.get(lang_code, "Unknown")
    
    def generate_multilingual_response(self, intent: str, confidence: float, 
                                     detected_language: str = "en") -> str:
        """
        Generate response in user's language
        
        Args:
            intent: Detected intent
            confidence: Confidence score
            detected_language: User's language
            
        Returns:
            Response in user's language
        """
        try:
            # Generate response based on intent and language
            if detected_language == "hi":  # Hindi
                return self._generate_hindi_response(intent, confidence)
            elif detected_language == "ta":  # Tamil
                return self._generate_tamil_response(intent, confidence)
            elif detected_language == "te":  # Telugu
                return self._generate_telugu_response(intent, confidence)
            elif detected_language == "ml":  # Malayalam
                return self._generate_malayalam_response(intent, confidence)
            elif detected_language == "kn":  # Kannada
                return self._generate_kannada_response(intent, confidence)
            elif detected_language == "bn":  # Bengali
                return self._generate_bengali_response(intent, confidence)
            elif detected_language == "gu":  # Gujarati
                return self._generate_gujarati_response(intent, confidence)
            elif detected_language == "mr":  # Marathi
                return self._generate_marathi_response(intent, confidence)
            elif detected_language == "pa":  # Punjabi
                return self._generate_punjabi_response(intent, confidence)
            elif detected_language == "or":  # Odia
                return self._generate_odia_response(intent, confidence)
            elif detected_language == "as":  # Assamese
                return self._generate_assamese_response(intent, confidence)
            elif detected_language == "ur":  # Urdu
                return self._generate_urdu_response(intent, confidence)
            else:  # English (default)
                return self._generate_english_response(intent, confidence)
                
        except Exception as e:
            logger.error(f"тЭМ Error generating multilingual response: {e}")
            return self._generate_english_response(intent, confidence)
    
    def _generate_english_response(self, intent: str, confidence: float) -> str:
        """Generate English response"""
        if intent == "emergency":
            return (
                "ЁЯЪи EMERGENCY ALERT!\n\n"
                "тЪая╕П  Based on your symptoms, this may require immediate medical attention!\n\n"
                "тЬЕ IMMEDIATE ACTIONS:\n"
                "тАв CALL EMERGENCY SERVICES (108) IMMEDIATELY\n"
                "тАв DO NOT DRIVE YOURSELF TO HOSPITAL\n"
                "тАв STAY CALM and sit comfortably\n"
                "тАв LOOSEN TIGHT CLOTHING\n"
                "тАв INFORM FAMILY MEMBERS\n"
                "тАв NOTE WHEN SYMPTOMS STARTED\n\n"
                "тП▒я╕П TIME IS CRITICAL - Act immediately!\n\n"
                "ЁЯТб This is AI-generated advice. Always consult a qualified healthcare professional for medical decisions!"
            )
        elif intent == "symptom_inquiry":
            return (
                "ЁЯПе Symptom Analysis:\n\n"
                "ЁЯУЛ Common Management:\n"
                "тАв Rest and adequate hydration\n"
                "тАв Monitor symptom progression\n"
                "тАв Maintain good nutrition\n\n"
                "тЪая╕П  SEEK MEDICAL CARE IF:\n"
                "тАв Symptoms worsen or persist > 3 days\n"
                "тАв High fever develops\n"
                "тАв Severe pain occurs\n"
                "тАв Breathing difficulties\n"
                "тАв Chest pain or pressure\n\n"
                "ЁЯТК OVER-THE-COUNTER RELIEF:\n"
                "тАв Paracetamol for pain/fever\n"
                "тАв Ibuprofen for inflammation\n"
                "(Follow package directions)\n\n"
                "ЁЯУЮ Consult healthcare provider for persistent symptoms!"
            )
        else:
            return (
                "ЁЯПе General Health Guidance:\n\n"
                "тЬЕ HEALTHY LIFESTYLE TIPS:\n"
                "тАв Stay hydrated (8 glasses daily)\n"
                "тАв Exercise 30 minutes daily\n"
                "тАв Eat balanced nutritious meals\n"
                "тАв Get 7-8 hours quality sleep\n"
                "тАв Practice good hygiene\n"
                "тАв Manage stress effectively\n\n"
                "тЪая╕П  WHEN TO CONSULT HEALTHCARE PROVIDER:\n"
                "тАв Persistent symptoms > 3 days\n"
                "тАв Unexplained weight changes\n"
                "тАв Chronic pain or discomfort\n"
                "тАв Abnormal vital signs\n"
                "тАв Concerning test results\n\n"
                "ЁЯУЮ Emergency: Call 108\n"
                "ЁЯПе Routine Care: Contact your doctor\n"
                "ЁЯТК Pharmacy: For minor ailments\n\n"
                "ЁЯТб This is general guidance - individual needs vary!"
            )
    
    def _generate_hindi_response(self, intent: str, confidence: float) -> str:
        """Generate Hindi response"""
        if intent == "emergency":
            return (
                "ЁЯЪи рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдЪреЗрддрд╛рд╡рдиреА!\n\n"
                "тЪая╕П  рдЖрдкрдХреЗ рд▓рдХреНрд╖рдгреЛрдВ рдХреЗ рдЖрдзрд╛рд░ рдкрд░, рдЗрд╕реЗ рддреБрд░рдВрдд рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдзреНрдпрд╛рди рджреЗрдиреЗ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реЛ рд╕рдХрддреА рд╣реИ!\n\n"
                "тЬЕ рддреБрд░рдВрдд рдХрд╛рд░реНрд░рд╡рд╛рдИ:\n"
                "тАв рддреБрд░рдВрдд рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕реЗрд╡рд╛рдУрдВ рдХреЛ рдХреЙрд▓ рдХрд░реЗрдВ (108)\n"
                "тАв рдЕрд╕реНрдкрддрд╛рд▓ рдореЗрдВ рдЦреБрдж рдХреЛ рдбреНрд░рд╛рдЗрд╡ рди рдХрд░реЗрдВ\n"
                "тАв рд╢рд╛рдВрдд рд░рд╣реЗрдВ рдФрд░ рдЖрд░рд╛рдо рд╕реЗ рдмреИрдареЗрдВ\n"
                "тАв рддрдВрдЧ рдХрдкрдбрд╝реЗ рдвреАрд▓реЗ рдХрд░реЗрдВ\n"
                "тАв рдкрд░рд┐рд╡рд╛рд░ рдХреЗ рд╕рджрд╕реНрдпреЛрдВ рдХреЛ рд╕реВрдЪрд┐рдд рдХрд░реЗрдВ\n"
                "тАв рд▓рдХреНрд╖рдгреЛрдВ рдХреЗ рд╢реБрд░реВ рд╣реЛрдиреЗ рдХрд╛ рд╕рдордп рдиреЛрдЯ рдХрд░реЗрдВ\n\n"
                "тП▒я╕П рд╕рдордп рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╣реИ - рддреБрд░рдВрдд рдХрд╛рд░реНрд░рд╡рд╛рдИ рдХрд░реЗрдВ!\n\n"
                "ЁЯТб рдпрд╣ AI-рдЬрдирд┐рдд рд╕рд▓рд╛рд╣ рд╣реИред рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдирд┐рд░реНрдгрдпреЛрдВ рдХреЗ рд▓рд┐рдП рд╣рдореЗрд╢рд╛ рдпреЛрдЧреНрдп рд╕реНрд╡рд╛рд╕реНрдереНрдп рджреЗрдЦрднрд╛рд▓ рдкреЗрд╢реЗрд╡рд░ рд╕реЗ рдкрд░рд╛рдорд░реНрд╢ рд▓реЗрдВ!"
            )
        elif intent == "symptom_inquiry":
            return (
                "ЁЯПе рд▓рдХреНрд╖рдг рд╡рд┐рд╢реНрд▓реЗрд╖рдг:\n\n"
                "ЁЯУЛ рд╕рд╛рдорд╛рдиреНрдп рдкреНрд░рдмрдВрдзрди:\n"
                "тАв рдЖрд░рд╛рдо рдФрд░ рдкрд░реНрдпрд╛рдкреНрдд рдЬрд▓рдпреЛрдЬрди\n"
                "тАв рд▓рдХреНрд╖рдг рдкреНрд░рдЧрддрд┐ рдХреА рдирд┐рдЧрд░рд╛рдиреА\n"
                "тАв рдЕрдЪреНрдЫрд╛ рдкреЛрд╖рдг рдмрдирд╛рдП рд░рдЦреЗрдВ\n\n"
                "тЪая╕П  рдЪрд┐рдХрд┐рддреНрд╕рд╛ рджреЗрдЦрднрд╛рд▓ рдХрдм рд▓реЗрдВ:\n"
                "тАв рд▓рдХреНрд╖рдг рдмрд┐рдЧрдбрд╝рддреЗ рд╣реИрдВ рдпрд╛ 3 рджрд┐рдиреЛрдВ рд╕реЗ рдЕрдзрд┐рдХ рд╕рдордп рддрдХ рд░рд╣рддреЗ рд╣реИрдВ\n"
                "тАв рдЙрдЪреНрдЪ рдмреБрдЦрд╛рд░ рд╡рд┐рдХрд╕рд┐рдд рд╣реЛрддрд╛ рд╣реИ\n"
                "тАв рдЧрдВрднреАрд░ рджрд░реНрдж рд╣реЛрддрд╛ рд╣реИ\n"
                "тАв рд╕рд╛рдВрд╕ рд▓реЗрдиреЗ рдореЗрдВ рдХрдард┐рдирд╛рдИ\n"
                "тАв рдЫрд╛рддреА рдореЗрдВ рджрд░реНрдж рдпрд╛ рджрдмрд╛рд╡\n\n"
                "ЁЯТК рдУрд╡рд░-рдж-рдХрд╛рдЙрдВрдЯрд░ рд░рд╛рд╣рдд:\n"
                "тАв рдкреИрд░рд╛рд╕рд┐рдЯрд╛рдореЛрд▓ рджрд░реНрдж/рдмреБрдЦрд╛рд░ рдХреЗ рд▓рд┐рдП\n"
                "тАв рдЗрдмреБрдкреНрд░реЛрдлреЗрди рд╕реВрдЬрди рдХреЗ рд▓рд┐рдП\n"
                "(рдкреИрдХреЗрдЬ рдирд┐рд░реНрджреЗрд╢реЛрдВ рдХрд╛ рдкрд╛рд▓рди рдХрд░реЗрдВ)\n\n"
                "ЁЯУЮ рд▓рдЧрд╛рддрд╛рд░ рд▓рдХреНрд╖рдгреЛрдВ рдХреЗ рд▓рд┐рдП рд╕реНрд╡рд╛рд╕реНрдереНрдп рджреЗрдЦрднрд╛рд▓ рдкреНрд░рджрд╛рддрд╛ рд╕реЗ рдкрд░рд╛рдорд░реНрд╢ рд▓реЗрдВ!"
            )
        else:
            return (
                "ЁЯПе рд╕рд╛рдорд╛рдиреНрдп рд╕реНрд╡рд╛рд╕реНрдереНрдп рдорд╛рд░реНрдЧрджрд░реНрд╢рди:\n\n"
                "тЬЕ рд╕реНрд╡рд╕реНрде рдЬреАрд╡рдирд╢реИрд▓реА рдпреБрдХреНрддрд┐рдпрд╛рдБ:\n"
                "тАв рдЬрд▓рдпреЛрдЬрди рдмрдирд╛рдП рд░рдЦреЗрдВ (рджрд┐рди рдореЗрдВ 8 рдЧрд┐рд▓рд╛рд╕)\n"
                "тАв рджреИрдирд┐рдХ 30 рдорд┐рдирдЯ рд╡реНрдпрд╛рдпрд╛рдо рдХрд░реЗрдВ\n"
                "тАв рд╕рдВрддреБрд▓рд┐рдд рдкреМрд╖реНрдЯрд┐рдХ рднреЛрдЬрди рдХрд░реЗрдВ\n"
                "тАв 7-8 рдШрдВрдЯреЗ рдЧреБрдгрд╡рддреНрддрд╛ рд╡рд╛рд▓реА рдиреАрдВрдж рд▓реЗрдВ\n"
                "тАв рдЕрдЪреНрдЫреА рд╕реНрд╡рдЪреНрдЫрддрд╛ рдХрд╛ рдЕрднреНрдпрд╛рд╕ рдХрд░реЗрдВ\n"
                "тАв рддрдирд╛рд╡ рдХрд╛ рдкреНрд░рднрд╛рд╡реА рд░реВрдк рд╕реЗ рдкреНрд░рдмрдВрдзрди рдХрд░реЗрдВ\n\n"
                "тЪая╕П  рд╕реНрд╡рд╛рд╕реНрдереНрдп рджреЗрдЦрднрд╛рд▓ рдкреНрд░рджрд╛рддрд╛ рдХрдм рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ:\n"
                "тАв рд▓рдЧрд╛рддрд╛рд░ рд▓рдХреНрд╖рдг 3 рджрд┐рдиреЛрдВ рд╕реЗ рдЕрдзрд┐рдХ\n"
                "тАв рдЕрд╡реНрдпрд╛рдЦреНрдпрд╛рдд рд╡рдЬрди рдкрд░рд┐рд╡рд░реНрддрди\n"
                "тАв рдкреБрд░рд╛рдирд╛ рджрд░реНрдж рдпрд╛ рдЕрд╕рд╣рдЬрддрд╛\n"
                "тАв рдЕрд╕рд╛рдорд╛рдиреНрдп рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╕рдВрдХреЗрдд\n"
                "тАв рдЪрд┐рдВрддрд╛рдЬрдирдХ рдкрд░реАрдХреНрд╖рдг рдкрд░рд┐рдгрд╛рдо\n\n"
                "ЁЯУЮ рдЖрдкрд╛рддрдХрд╛рд▓: 108 рдХреЙрд▓ рдХрд░реЗрдВ\n"
                "ЁЯПе рдирд┐рдпрдорд┐рдд рджреЗрдЦрднрд╛рд▓: рдЕрдкрдиреЗ рдбреЙрдХреНрдЯрд░ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ\n"
                "ЁЯТК рдлрд╛рд░реНрдореЗрд╕реА: рдЫреЛрдЯреА рдмреАрдорд╛рд░рд┐рдпреЛрдВ рдХреЗ рд▓рд┐рдП\n\n"
                "ЁЯТб рдпрд╣ рд╕рд╛рдорд╛рдиреНрдп рдорд╛рд░реНрдЧрджрд░реНрд╢рди рд╣реИ - рд╡реНрдпрдХреНрддрд┐рдЧрдд рдЖрд╡рд╢реНрдпрдХрддрд╛рдПрдБ рдЕрд▓рдЧ-рдЕрд▓рдЧ рд╣реЛрддреА рд╣реИрдВ!"
            )
    
    def _generate_tamil_response(self, intent: str, confidence: float) -> str:
        """Generate Tamil response"""
        if intent == "emergency":
            return (
                "ЁЯЪи роЕро╡роЪро░роиро┐ро▓рпИ роОроЪрпНроЪро░ро┐роХрпНроХрпИ!\n\n"
                "тЪая╕П  роЙроЩрпНроХро│рпН роЕро▒ро┐роХрпБро▒ро┐роХро│ро┐ройрпН роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓рпН, роЗродрпБ роЙроЯройроЯро┐ рооро░рпБродрпНродрпБро╡ роХро╡ройродрпНродрпИродрпН родрпЗро╡рпИрокрпНрокроЯро▓ро╛роорпН!\n\n"
                "тЬЕ роЙроЯройроЯро┐ роироЯро╡роЯро┐роХрпНроХрпИроХро│рпН:\n"
                "тАв роЙроЯройроЯро┐ роЕро╡роЪро░роиро┐ро▓рпИ роЪрпЗро╡рпИроХро│рпИ роЕро┤рпИроХрпНроХро╡рпБроорпН (108)\n"
                "тАв рооро░рпБродрпНродрпБро╡рооройрпИроХрпНроХрпБ родро╛роЩрпНроХро│ро╛роХро╡рпЗ роУроЯрпНроЯрпБро╡родрпИродрпН родро╡ро┐ро░рпНроХрпНроХро╡рпБроорпН\n"
                "тАв роЕроорпИродро┐ропро╛роХ роЗро░рпБроЩрпНроХро│рпН рооро▒рпНро▒рпБроорпН ро╡роЪродро┐ропро╛роХ роЙроЯрпНроХро╛ро░рпБроЩрпНроХро│рпН\n"
                "тАв роЗро▒рпБроХрпНроХрооро╛рой роЖроЯрпИроХро│рпИ родро│ро░рпНродрпНродрпБроЩрпНроХро│рпН\n"
                "тАв роХрпБроЯрпБроорпНрок роЙро▒рпБрокрпНрокро┐ройро░рпНроХро│рпИ родрпЖро░ро┐ро╡ро┐ропрпБроЩрпНроХро│рпН\n"
                "тАв роЕро▒ро┐роХрпБро▒ро┐роХро│рпН родрпКроЯроЩрпНроХро┐роп роирпЗро░родрпНродрпИ роХрпБро▒ро┐рокрпНрокро┐роЯрпБроЩрпНроХро│рпН\n\n"
                "тП▒я╕П роирпЗро░роорпН роорпБроХрпНроХро┐ропроорпН - роЙроЯройроЯро┐ропро╛роХ роЪрпЖропро▓рпНрокроЯрпБроЩрпНроХро│рпН!\n\n"
                "ЁЯТб роЗродрпБ AI-роЙро░рпБро╡ро╛роХрпНроХрокрпНрокроЯрпНроЯ роЖро▓рпЛроЪройрпИ. рооро░рпБродрпНродрпБро╡ роорпБроЯро┐ро╡рпБроХро│рпБроХрпНроХрпБ роОрокрпНрокрпЛродрпБроорпН родроХрпБродро┐ропрпБро│рпНро│ рооро░рпБродрпНродрпБро╡ родрпКро┤ро┐ро▓рпН роиро┐рокрпБрогро░ро┐роЯроорпН роЖро▓рпЛроЪройрпИ рокрпЖро▒рпБроЩрпНроХро│рпН!"
            )
        elif intent == "symptom_inquiry":
            return (
                "ЁЯПе роЕро▒ро┐роХрпБро▒ро┐ рокроХрпБрокрпНрокро╛ропрпНро╡рпБ:\n\n"
                "ЁЯУЛ рокрпКродрпБро╡ро╛рой роорпЗро▓ро╛рогрпНроорпИ:\n"
                "тАв роУропрпНро╡рпБ рооро▒рпНро▒рпБроорпН рокрпЛродрпБрооро╛рой роирпАро░рпНрокрпНрокро╛ройроорпН\n"
                "тАв роЕро▒ро┐роХрпБро▒ро┐ роорпБройрпНройрпЗро▒рпНро▒родрпНродрпИроХрпН роХрогрпНроХро╛рогро┐роХрпНроХро╡рпБроорпН\n"
                "тАв роиро▓рпНро▓ роКроЯрпНроЯроЪрпНроЪродрпНродрпБ рокро░ро╛рооро░ро┐роХрпНроХро╡рпБроорпН\n\n"
                "тЪая╕П  роОрокрпНрокрпЛродрпБ рооро░рпБродрпНродрпБро╡ роХро╡ройроорпН родрпЗро╡рпИ:\n"
                "тАв роЕро▒ро┐роХрпБро▒ро┐роХро│рпН роорпЛроЪрооро╛роХрпБроорпН роЕро▓рпНро▓родрпБ 3 роиро╛роЯрпНроХро│рпБроХрпНроХрпБ роорпЗро▓рпН роирпАроЯро┐роХрпНроХрпБроорпН\n"
                "тАв роЙропро░рпН роХро╛ропрпНроЪрпНроЪро▓рпН роПро▒рпНрокроЯрпБроХро┐ро▒родрпБ\n"
                "тАв роХроЯрпБроорпН ро╡ро▓ро┐ роПро▒рпНрокроЯрпБроХро┐ро▒родрпБ\n"
                "тАв роЪрпБро╡ро╛роЪ роЪро┐ро░роороорпН\n"
                "тАв рооро╛ро░рпНрокроХ ро╡ро▓ро┐ роЕро▓рпНро▓родрпБ роЕро┤рпБродрпНродроорпН\n\n"
                "ЁЯТК роУро╡ро░рпН-родро┐-роХро╡рпБрогрпНроЯро░рпН рооро░рпБроирпНродрпБ:\n"
                "тАв ро╡ро▓ро┐/роХро╛ропрпНроЪрпНроЪро▓рпБроХрпНроХрпБ рокро╛ро░ро╛роЪро┐роЯрпНроЯроорпЛро▓рпН\n"
                "тАв ро╡рпАроХрпНроХродрпНродро┐ро▒рпНроХрпБ роЗрокрпБрокрпБро░рпЛроГрокрпЖройрпН\n"
                "(рокрпЗроХрпНроХрпЗроЬрпН ро╡ро┤ро┐роорпБро▒рпИроХро│рпИрокрпН рокро┐ройрпНрокро▒рпНро▒ро╡рпБроорпН)\n\n"
                "ЁЯУЮ родрпКроЯро░рпНроЪрпНроЪро┐ропро╛рой роЕро▒ро┐роХрпБро▒ро┐роХро│рпБроХрпНроХрпБ рооро░рпБродрпНродрпБро╡ родрпКро┤ро┐ро▓рпН роиро┐рокрпБрогро░ро┐роЯроорпН роЖро▓рпЛроЪройрпИ рокрпЖро▒рпБроЩрпНроХро│рпН!"
            )
        else:
            return (
                "ЁЯПе рокрпКродрпБро╡ро╛рой роЪрпБроХро╛родро╛ро░ ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпН:\n\n"
                "тЬЕ роЖро░рпЛроХрпНроХро┐ропрооро╛рой ро╡ро╛ро┤рпНроХрпНроХрпИроорпБро▒рпИ роХрпБро▒ро┐рокрпНрокрпБроХро│рпН:\n"
                "тАв роирпАро░рпНрокрпНрокро╛ройроорпН рокро░ро╛рооро░ро┐роХрпНроХро╡рпБроорпН (родро┐ройроорпН 8 роХро┐ро│ро╛ро╕рпНроХро│рпН)\n"
                "тАв родро┐ройроорпБроорпН 30 роиро┐рооро┐роЯроЩрпНроХро│рпН роЙроЯро▒рпНрокропро┐ро▒рпНроЪро┐ роЪрпЖропрпНропрпБроЩрпНроХро│рпН\n"
                "тАв роЪроороиро┐ро▓рпИропро╛рой рокрпЛро╖рпНроЯро┐роХро░рооро╛рой роЙрогро╡рпБ роЪро╛рокрпНрокро┐роЯрпБроЩрпНроХро│рпН\n"
                "тАв 7-8 роорогро┐ родро░роорпН роЙропро░рпНроирпНрод родрпВроХрпНроХроорпН роОроЯрпБроХрпНроХро╡рпБроорпН\n"
                "тАв роиро▓рпНро▓ роЪрпБродрпНродроорпН рокро░ро╛рооро░ро┐роХрпНроХро╡рпБроорпН\n"
                "тАв рооройроЕро┤рпБродрпНродродрпНродрпИ рокро┐ро░рокро▓рооро╛роХ роиро┐ро░рпНро╡роХро┐роХрпНроХро╡рпБроорпН\n\n"
                "тЪая╕П  роОрокрпНрокрпЛродрпБ рооро░рпБродрпНродрпБро╡ родрпКро┤ро┐ро▓рпН роиро┐рокрпБрогро░рпИ родрпКроЯро░рпНрокрпБ роХрпКро│рпНро│ ро╡рпЗрогрпНроЯрпБроорпН:\n"
                "тАв родрпКроЯро░рпНроЪрпНроЪро┐ропро╛рой роЕро▒ро┐роХрпБро▒ро┐роХро│рпН 3 роиро╛роЯрпНроХро│рпБроХрпНроХрпБ роорпЗро▓рпН\n"
                "тАв ро╡ро┐ро│роЩрпНроХро╛род роОроЯрпИ рооро╛ро▒рпНро▒роЩрпНроХро│рпН\n"
                "тАв роиро┐ро▓рпИропро╛рой ро╡ро▓ро┐ роЕро▓рпНро▓родрпБ роЕроЪрпБроХро░роорпН\n"
                "тАв роЕроЪро╛родро╛ро░рог роорпБроХрпНроХро┐роп роЕро▒ро┐роХрпБро▒ро┐роХро│рпН\n"
                "тАв роХро╡ро▓рпИроХрпНроХро┐роЯрооро╛рой роЪрпЛродройрпИ роорпБроЯро┐ро╡рпБроХро│рпН\n\n"
                "ЁЯУЮ роЕро╡роЪро░роиро┐ро▓рпИ: 108роР роЕро┤рпИроХрпНроХро╡рпБроорпН\n"
                "ЁЯПе ро╡ро┤роХрпНроХрооро╛рой роХро╡ройроорпН: роЙроЩрпНроХро│рпН роЯро╛роХрпНроЯро░рпИродрпН родрпКроЯро░рпНрокрпБ роХрпКро│рпНро│рпБроЩрпНроХро│рпН\n"
                "ЁЯТК рооро░рпБроирпНродроХроорпН: роЪро┐ро▒ро┐роп роирпЛропрпНроХро│рпБроХрпНроХрпБ\n\n"
                "ЁЯТб роЗродрпБ рокрпКродрпБро╡ро╛рой ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпН - родройро┐рокрпНрокроЯрпНроЯ родрпЗро╡рпИроХро│рпН ро╡рпЗро▒рпБрокроЯрпБроХро┐ройрпНро▒рой!"
            )
    
    # Add similar methods for other languages...
    def _generate_telugu_response(self, intent: str, confidence: float) -> str:
        """Generate Telugu response"""
        if intent == "emergency":
            return (
                "ЁЯЪи р░Ор░ор░░р▒Нр░Ьр▒Жр░ир▒Нр░╕р▒А р░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Х!\n\n"
                "тЪая╕П  р░ор▒А р░▓р░Хр▒Нр░╖р░гр░╛р░▓ р░Жр░зр░╛р░░р░Вр░Чр░╛, р░Зр░жр░┐ р░др░Хр▒Нр░╖р░г р░ор▒Жр░бр░┐р░Хр░▓р▒Н р░╢р▒Нр░░р░жр▒Нр░з р░Ер░╡р░╕р░░р░В!\n\n"
                "тЬЕ р░др░Хр▒Нр░╖р░г р░Ър░░р▒Нр░пр░▓р▒Б:\n"
                "тАв р░др░Хр▒Нр░╖р░г р░Ор░ор░░р▒Нр░Ьр▒Жр░ир▒Нр░╕р▒А р░╕р▒Зр░╡р░▓р░ир▒Б р░Хр░╛р░▓р▒Н р░Ър▒Зр░пр░Вр░бр░┐ (108)\n"
                "тАв р░╣р░╛р░╕р▒Нр░кр░┐р░Яр░▓р▒НтАМр░Хр▒Б р░ор▒Ар░░р▒Б р░╕р▒Нр░╡р░пр░Вр░Чр░╛ р░бр▒Нр░░р▒Ир░╡р▒Н р░Ър▒Зр░пр░Хр░Вр░бр░┐\n"
                "тАв р░╢р░╛р░Вр░др░Вр░Чр░╛ р░Йр░Вр░бр░Вр░бр░┐ р░ор░░р░┐р░пр▒Б р░╡р░жр▒Бр░▓р▒Бр░Чр░╛ р░Хр▒Вр░░р▒Нр░Ър▒Лр░Вр░бр░┐\n"
                "тАв р░Яр▒Ир░Яр▒Н р░жр▒Бр░╕р▒Нр░др▒Бр░▓р░ир▒Б р░╕р░бр░▓р░┐р░Вр░Ър░Вр░бр░┐\n"
                "тАв р░Хр▒Бр░Яр▒Бр░Вр░м р░╕р░нр▒Нр░пр▒Бр░▓р░ир▒Б р░др▒Жр░▓р░┐р░пр░Ьр▒Зр░пр░Вр░бр░┐\n"
                "тАв р░▓р░Хр▒Нр░╖р░гр░╛р░▓р▒Б р░кр▒Нр░░р░╛р░░р░Вр░нр░ор▒Ир░и р░╕р░ор░пр░╛р░ир▒Нр░ир░┐ р░Чр░ор░ир░┐р░Вр░Ър░Вр░бр░┐\n\n"
                "тП▒я╕П р░╕р░ор░пр░В р░кр▒Нр░░р░╛р░зр░╛р░ир▒Нр░пр░д р░Хр░▓р░┐р░Чр░┐ - р░др░Хр▒Нр░╖р░гр░ор▒З р░Ър░░р▒Нр░п р░др▒Ар░╕р▒Бр░Хр▒Лр░Вр░бр░┐!\n\n"
                "ЁЯТб р░Зр░жр░┐ AI-р░Ьр░ир░░р▒Зр░Яр▒Жр░бр▒Н р░╕р░▓р░╣р░╛. р░ор▒Жр░бр░┐р░Хр░▓р▒Н р░ир░┐р░░р▒Нр░гр░пр░╛р░▓ р░Хр▒Лр░╕р░В р░Ор░▓р▒Нр░▓р░кр▒Нр░кр▒Бр░бр▒В р░др░Чр░┐р░и р░╣р▒Жр░▓р▒Нр░др▒НтАМр░Хр▒Зр░░р▒Н р░кр▒Нр░░р▒Кр░лр▒Жр░╖р░ир░▓р▒НтАМр░др▒Л р░╕р░Вр░кр▒Нр░░р░жр░┐р░Вр░Ър░Вр░бр░┐!"
            )
        elif intent == "symptom_inquiry":
            return (
                "ЁЯПе р░▓р░Хр▒Нр░╖р░гр░╛р░▓ р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г:\n\n"
                "ЁЯУЛ р░╕р░╛р░зр░╛р░░р░г р░ир░┐р░░р▒Нр░╡р░╣р░г:\n"
                "тАв р░╡р░┐р░╢р▒Нр░░р░╛р░Вр░др░┐ р░ор░░р░┐р░пр▒Б р░╕р░░р░┐р░кр▒Лр░др▒Б р░Ьр░▓р░Хр▒Бр░Вр░нр░В\n"
                "тАв р░▓р░Хр▒Нр░╖р░гр░╛р░▓ р░кр▒Нр░░р░Чр░др░┐р░ир░┐ р░кр░░р▒Нр░пр░╡р▒Зр░Хр▒Нр░╖р░┐р░Вр░Ър░Вр░бр░┐\n"
                "тАв р░ор░Вр░Ър░┐ р░кр▒Лр░╖р░Хр░╛р░╣р░╛р░░р░В р░Хр▒Кр░ир░╕р░╛р░Чр░┐р░Вр░Ър░Вр░бр░┐\n\n"
                "тЪая╕П  р░Ор░кр▒Нр░кр▒Бр░бр▒Б р░ор▒Жр░бр░┐р░Хр░▓р▒Н р░Хр▒Зр░░р▒Н р░др▒Ар░╕р▒Бр░Хр▒Лр░╡р░╛р░▓р░┐:\n"
                "тАв р░▓р░Хр▒Нр░╖р░гр░╛р░▓р▒Б р░ор▒Лр░╢р░В р░Ер░╡р▒Бр░др░╛р░пр░┐ р░▓р▒Зр░жр░╛ 3 р░░р▒Лр░Ьр▒Бр░▓р▒Б р░кр▒Ир░Чр░╛ р░Йр░Вр░Яр░╛р░пр░┐\n"
                "тАв р░Ер░зр░┐р░Х р░Ьр▒Нр░╡р░░р░В р░Пр░░р▒Нр░кр░бр▒Бр░др▒Бр░Вр░жр░┐\n"
                "тАв р░др▒Ар░╡р▒Нр░░р░ор▒Ир░и р░ир▒Кр░кр▒Нр░кр░┐ р░Пр░░р▒Нр░кр░бр▒Бр░др▒Бр░Вр░жр░┐\n"
                "тАв р░╢р▒Нр░╡р░╛р░╕ р░╕р░ор░╕р▒Нр░пр░▓р▒Б\n"
                "тАв р░Ыр░╛р░др▒А р░ир▒Кр░кр▒Нр░кр░┐ р░▓р▒Зр░жр░╛ р░Тр░др▒Нр░др░┐р░бр░┐\n\n"
                "ЁЯТК р░Ур░╡р░░р▒Н-р░жр░┐-р░Хр▒Мр░Вр░Яр░░р▒Н р░Йр░кр░╢р░ор░ир░В:\n"
                "тАв р░ир▒Кр░кр▒Нр░кр░┐/р░Ьр▒Нр░╡р░░р░В р░Хр▒Лр░╕р░В р░кр░╛р░░р░╛р░╕р░┐р░Яр░╛р░ор▒Лр░▓р▒Н\n"
                "тАв р░╡р▒Нр░пр░╛р░зр░┐ р░Хр▒Лр░╕р░В р░Зр░мр▒Бр░кр▒Нр░░р▒Лр░лр▒Жр░ир▒Н\n"
                "(р░кр▒Нр░пр░╛р░Хр▒Зр░Ьр▒А р░╕р▒Вр░Ър░ир░▓р░ир▒Б р░Ер░ир▒Бр░╕р░░р░┐р░Вр░Ър░Вр░бр░┐)\n\n"
                "ЁЯУЮ р░ир░┐р░░р░Вр░др░░ р░▓р░Хр▒Нр░╖р░гр░╛р░▓ р░Хр▒Лр░╕р░В р░╣р▒Жр░▓р▒Нр░др▒НтАМр░Хр▒Зр░░р▒Н р░кр▒Нр░░р▒Кр░╡р▒Ир░бр░░р▒НтАМр░др▒Л р░╕р░Вр░кр▒Нр░░р░жр░┐р░Вр░Ър░Вр░бр░┐!"
            )
        else:
            return (
                "ЁЯПе р░╕р░╛р░зр░╛р░░р░г р░╣р▒Жр░▓р▒Нр░др▒Н р░ор░╛р░░р▒Нр░Чр░жр░░р▒Нр░╢р░Хр░В:\n\n"
                "тЬЕ р░Жр░░р▒Лр░Чр▒Нр░пр░Хр░░р░ор▒Ир░и р░Ьр▒Ар░╡р░и р░╢р▒Ир░▓р░┐ р░╕р▒Вр░Ър░ир░▓р▒Б:\n"
                "тАв р░Ьр░▓р░Хр▒Бр░Вр░нр░В р░Хр▒Кр░ир░╕р░╛р░Чр░┐р░Вр░Ър░Вр░бр░┐ (р░░р▒Лр░Ьр▒Бр░Хр▒Б 8 р░Чр▒Нр░▓р░╛р░╕р▒Бр░▓р▒Б)\n"
                "тАв р░░р▒Лр░Ьр▒Бр░Хр▒Б 30 р░ир░┐р░ор░┐р░╖р░╛р░▓р▒Б р░╡р▒Нр░пр░╛р░пр░╛р░ор░В р░Ър▒Зр░пр░Вр░бр░┐\n"
                "тАв р░╕р░ор░др▒Бр░▓р▒Нр░пр░ор▒Ир░и р░кр▒Лр░╖р░Хр░╛р░╣р░╛р░░ р░нр▒Лр░Ьр░ир░В р░Ър▒Зр░пр░Вр░бр░┐\n"
                "тАв 7-8 р░Чр░Вр░Яр░▓ р░ир░╛р░гр▒Нр░пр░ор▒Ир░и р░ир░┐р░жр▒Нр░░ р░кр▒Кр░Вр░жр░Вр░бр░┐\n"
                "тАв р░ор░Вр░Ър░┐ р░╢р▒Бр░нр▒Нр░░р░д р░Ер░нр▒Нр░пр░╛р░╕р░В р░Ър▒Зр░пр░Вр░бр░┐\n"
                "тАв р░Тр░др▒Нр░др░┐р░бр░┐р░ир░┐ р░кр▒Нр░░р░нр░╛р░╡р░╡р░Вр░др░Вр░Чр░╛ р░ир░┐р░░р▒Нр░╡р░╣р░┐р░Вр░Ър░Вр░бр░┐\n\n"
                "тЪая╕П  р░Ор░кр▒Нр░кр▒Бр░бр▒Б р░╣р▒Жр░▓р▒Нр░др▒НтАМр░Хр▒Зр░░р▒Н р░кр▒Нр░░р▒Кр░╡р▒Ир░бр░░р▒НтАМр░ир▒Б р░╕р░Вр░кр▒Нр░░р░жр░┐р░Вр░Ър░╛р░▓р░┐:\n"
                "тАв р░ир░┐р░░р░Вр░др░░ р░▓р░Хр▒Нр░╖р░гр░╛р░▓р▒Б 3 р░░р▒Лр░Ьр▒Бр░▓р▒Б р░кр▒Ир░Чр░╛\n"
                "тАв р░╡р░┐р░╡р░░р░г р░▓р▒Зр░ир░┐ р░мр░░р▒Бр░╡р▒Б р░ор░╛р░░р▒Нр░кр▒Бр░▓р▒Б\n"
                "тАв р░жр▒Ар░░р▒Нр░Шр░Хр░╛р░▓р░┐р░Х р░ир▒Кр░кр▒Нр░кр░┐ р░▓р▒Зр░жр░╛ р░Ер░╕р▒Мр░Хр░░р▒Нр░пр░В\n"
                "тАв р░Ер░╕р░╛р░зр░╛р░░р░г р░кр▒Нр░░р░зр░╛р░и р░╕р▒Вр░Ър░ир░▓р▒Б\n"
                "тАв р░Хр░╛р░Вр░др░┐ р░кр░░р▒Ар░Хр▒Нр░╖ р░лр░▓р░┐р░др░╛р░▓р▒Б\n\n"
                "ЁЯУЮ р░Ор░ор░░р▒Нр░Ьр▒Жр░ир▒Нр░╕р▒А: 108 р░Хр░╛р░▓р▒Н р░Ър▒Зр░пр░Вр░бр░┐\n"
                "ЁЯПе р░╕р░╛р░зр░╛р░░р░г р░Хр▒Зр░░р▒Н: р░ор▒А р░бр░╛р░Хр▒Нр░Яр░░р▒НтАМр░ир▒Б р░╕р░Вр░кр▒Нр░░р░жр░┐р░Вр░Ър░Вр░бр░┐\n"
                "ЁЯТК р░лр░╛р░░р▒Нр░ор░╕р▒А: р░Ър░┐р░ир▒Нр░и р░Ер░ир░╛р░░р▒Лр░Чр▒Нр░пр░╛р░▓ р░Хр▒Лр░╕р░В\n\n"
                "ЁЯТб р░Зр░жр░┐ р░╕р░╛р░зр░╛р░░р░г р░ор░╛р░░р▒Нр░Чр░жр░░р▒Нр░╢р░Хр░В - р░╡р▒Нр░пр░Хр▒Нр░др░┐р░Чр░д р░Ер░╡р░╕р░░р░╛р░▓р▒Б р░╡р▒Зр░░р▒Бр░Чр░╛ р░Йр░Вр░Яр░╛р░пр░┐!"
            )
    
    # Add similar methods for other languages (Malayalam, Kannada, Bengali, etc.)
    def _generate_malayalam_response(self, intent: str, confidence: float) -> str:
        """Generate Malayalam response"""
        return self._generate_english_response(intent, confidence)  # Fallback for now
    
    def _generate_kannada_response(self, intent: str, confidence: float) -> str:
        """Generate Kannada response"""
        return self._generate_english_response(intent, confidence)  # Fallback for now
    
    def _generate_bengali_response(self, intent: str, confidence: float) -> str:
        """Generate Bengali response"""
        return self._generate_english_response(intent, confidence)  # Fallback for now
    
    def _generate_gujarati_response(self, intent: str, confidence: float) -> str:
        """Generate Gujarati response"""
        return self._generate_english_response(intent, confidence)  # Fallback for now
    
    def _generate_marathi_response(self, intent: str, confidence: float) -> str:
        """Generate Marathi response"""
        return self._generate_english_response(intent, confidence)  # Fallback for now
    
    def _generate_punjabi_response(self, intent: str, confidence: float) -> str:
        """Generate Punjabi response"""
        return self._generate_english_response(intent, confidence)  # Fallback for now
    
    def _generate_odia_response(self, intent: str, confidence: float) -> str:
        """Generate Odia response"""
        return self._generate_english_response(intent, confidence)  # Fallback for now
    
    def _generate_assamese_response(self, intent: str, confidence: float) -> str:
        """Generate Assamese response"""
        return self._generate_english_response(intent, confidence)  # Fallback for now
    
    def _generate_urdu_response(self, intent: str, confidence: float) -> str:
        """Generate Urdu response"""
        return self._generate_english_response(intent, confidence)  # Fallback for now
    
    def _basic_intent_detection(self, text: str) -> Dict[str, Any]:
        """Basic intent detection when models fail"""
        text_lower = text.lower()
        
        # Emergency detection
        emergency_keywords = [
            "severe chest pain", "difficulty breathing", "unconscious", 
            "stroke", "heart attack", "bleeding", "emergency"
        ]
        if any(keyword in text_lower for keyword in emergency_keywords):
            return {
                "intent": "emergency",
                "confidence": 0.95,
                "model_used": "basic",
                "symptoms": self._extract_symptoms(text_lower),
                "diseases": self._extract_diseases(text_lower),
                "entities": []
            }
        
        # Symptom detection
        symptom_keywords = [
            "headache", "fever", "cough", "pain", "nausea", "vomiting",
            "dizziness", "fatigue", "rash", "swelling"
        ]
        if any(keyword in text_lower for keyword in symptom_keywords):
            return {
                "intent": "symptom_inquiry",
                "confidence": 0.85,
                "model_used": "basic",
                "symptoms": self._extract_symptoms(text_lower),
                "diseases": self._extract_diseases(text_lower),
                "entities": []
            }
        
        # Disease detection
        disease_keywords = [
            "diabetes", "hypertension", "cancer", "malaria", "dengue",
            "covid", "flu", "influenza", "asthma", "arthritis"
        ]
        if any(keyword in text_lower for keyword in disease_keywords):
            return {
                "intent": "disease_inquiry",
                "confidence": 0.80,
                "model_used": "basic",
                "symptoms": self._extract_symptoms(text_lower),
                "diseases": self._extract_diseases(text_lower),
                "entities": []
            }
        
        # Default general health
        return {
            "intent": "general_health",
            "confidence": 0.70,
            "model_used": "basic",
            "symptoms": [],
            "diseases": [],
            "entities": []
        }
    
    def _extract_symptoms(self, text: str) -> List[str]:
        """Extract symptoms from text"""
        common_symptoms = [
            "headache", "fever", "cough", "pain", "nausea", "vomiting",
            "dizziness", "fatigue", "rash", "swelling", "chest pain",
            "difficulty breathing", "shortness of breath", "high temperature",
            "low temperature", "chills", "sweating", "weakness", "tiredness",
            "blurry vision", "double vision", "loss of vision", "eye pain",
            "ear pain", "hearing loss", "sore throat", "hoarse voice",
            "difficulty swallowing", "loss of appetite", "weight loss",
            "weight gain", "insomnia", "sleepiness", "confusion",
            "memory loss", "numbness", "tingling", "muscle weakness",
            "joint pain", "stiffness", "back pain", "neck pain",
            "abdominal pain", "stomach pain", "cramps", "diarrhea",
            "constipation", "bloody stool", "black stool", "urinary problems",
            "frequent urination", "painful urination", "blood in urine",
            "skin rash", "itching", "bruising", "bleeding"
        ]
        
        found_symptoms = []
        for symptom in common_symptoms:
            if symptom in text:
                found_symptoms.append(symptom)
        
        return found_symptoms
    
    def _extract_diseases(self, text: str) -> List[str]:
        """Extract diseases from text"""
        common_diseases = [
            "diabetes", "hypertension", "high blood pressure", "cancer",
            "malaria", "dengue", "covid", "coronavirus", "flu", "influenza",
            "asthma", "arthritis", "tuberculosis", "tb", "typhoid",
            "cholera", "jaundice", "hepatitis", "migraine", "epilepsy",
            "stroke", "heart attack", "cardiac arrest", "anemia",
            "thyroid", "depression", "anxiety", "osteoporosis",
            "kidney stones", "urinary tract infection", "uti",
            "gastroenteritis", "food poisoning", "allergies", "sinusitis"
        ]
        
        found_diseases = []
        for disease in common_diseases:
            if disease in text:
                found_diseases.append(disease)
        
        return found_diseases

# Create service instance
healthcare_service = MultilingualHealthcareService()

# Test function
def test_multilingual_service():
    """Test multilingual healthcare service"""
    print("ЁЯзк Testing Multilingual Healthcare Service")
    print("=" * 45)
    
    service = MultilingualHealthcareService()
    
    # Test cases in different languages
    test_cases = [
        {
            "language": "English",
            "code": "en",
            "text": "I have severe chest pain and difficulty breathing"
        },
        {
            "language": "Hindi",
            "code": "hi", 
            "text": "рдореБрдЭреЗ рд╕рд┐рд░рджрд░реНрдж рдФрд░ рдмреБрдЦрд╛рд░ рд╣реИ"
        },
        {
            "language": "Tamil",
            "code": "ta",
            "text": "роОройроХрпНроХрпБ родро▓рпИро╡ро▓ро┐ рооро▒рпНро▒рпБроорпН роХро╛ропрпНроЪрпНроЪро▓рпН роЙрогрпНроЯрпБ"
        },
        {
            "language": "Telugu",
            "code": "te",
            "text": "р░ир░╛р░Хр▒Б р░др░▓р░ир▒Кр░кр▒Нр░кр░┐ р░ор░░р░┐р░пр▒Б р░Ьр▒Нр░╡р░░р░В р░Йр░Вр░жр░┐"
        }
    ]
    
    for i, case in enumerate(test_cases, 1):
        print(f"\n{i}. Testing {case['language']} ({case['code']}):")
        print(f"   Text: {case['text']}")
        
        # Detect language
        detected_lang = service.detect_language(case['text'])
        print(f"   Detected language: {detected_lang}")
        
        # Process query
        result = service.process_healthcare_query(case['text'], case['code'])
        print(f"   Intent: {result.intent} ({result.confidence:.0%})")
        print(f"   Language: {result.language}")
        print(f"   Model: {result.model_used}")
        print(f"   Response preview: {result.answer[:100]}...")
        print(f"   Processing time: {result.processing_time:.3f}s")
    
    print("\nЁЯОЙ Multilingual service test completed!")

if __name__ == "__main__":
    test_multilingual_service()